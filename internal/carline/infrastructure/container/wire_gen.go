// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	mail2 "github.com/pascalallen/carline/internal/carline/domain/mail"
	"github.com/pascalallen/carline/internal/carline/domain/security_token"
	"github.com/pascalallen/carline/internal/carline/infrastructure/database"
	"github.com/pascalallen/carline/internal/carline/infrastructure/mail"
	"github.com/pascalallen/carline/internal/carline/infrastructure/messaging"
	"github.com/pascalallen/carline/internal/carline/infrastructure/repository"
	"os"
)

// Injectors from wire.go:

func InitializeContainer() Container {
	db := database.NewPostgresSession()
	permissionRepository := repository.NewPostgresPermissionRepository(db)
	roleRepository := repository.NewPostgresRoleRepository(db)
	userRepository := repository.NewPostgresUserRepository(db)
	security_tokenRepository := repository.NewPostgresSecurityTokenRepository(db)
	schoolRepository := repository.NewPostgresSchoolRepository(db)
	studentRepository := repository.NewPostgresStudentRepository(db)
	connection := messaging.NewRabbitMQConnection()
	commandBus := messaging.NewRabbitMqCommandBus(connection)
	queryBus := messaging.NewSynchronousQueryBus()
	eventDispatcher := messaging.NewRabbitMqEventDispatcher(connection)
	client := mail.NewSendGridMailClient()
	service := provideMailService()
	security_tokenService := security_token.NewService(security_tokenRepository)
	container := NewContainer(db, permissionRepository, roleRepository, userRepository, security_tokenRepository, schoolRepository, studentRepository, connection, commandBus, queryBus, eventDispatcher, client, service, security_tokenService)
	return container
}

// wire.go:

func provideMailService() mail2.Service {
	if os.Getenv("APP_ENV") == "production" {
		sendgridClient := mail.NewSendGridMailClient()
		return mail.NewSendGridMailService(sendgridClient)
	}

	host := os.Getenv("MAILTRAP_HOST")
	port := os.Getenv("MAILTRAP_PORT")
	username := os.Getenv("MAILTRAP_USERNAME")
	password := os.Getenv("MAILTRAP_PASSWORD")

	return mail.NewMailtrapMailService(host, port, username, password)
}
